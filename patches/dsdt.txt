#Maintained by: RehabMan for: Laptop Patches
#fix_ADBG.txt

into method label ADBG replace_content begin Return(0) end;



#remove_DSM.txt

# To remove all _DSM methods
# If used, this should be one of the first patches you apply.

into_all method label _DSM remove_entry;



#system_ADP1.txt

# Note: if AppleACPIACAdapter is already loading (look at your ioreg), then
#  this patch is not necessary for you.

# Note: Old patch used to rename AC or ACAD to ADP1 to be more "Apple" like
# Turns out, this is not needed.

# Power fix - cause AppleACPIACAdapter to be loaded
into device name_hid ACPI0003 code_regex Name\s+\(_PRW,[\s\S]*\}\) remove_matched;
into device name_hid ACPI0003 insert
begin
Name (_PRW, Package() { 0x18, 0x03 })
end;



#system_IMEI.txt

# add missing IMEI device

into device label IMEI parent_label PCI0 remove_entry;
into device label PCI0 insert
begin
Device (IMEI)\n
{\n
    Name (_ADR, 0x00160000)\n
}\n
end;



#system_MCHC.txt

# Patch Name   : Add MCHC
# Credits: From PJALM's Intel7 patches

# Add the missing MCHC device
into device label MCHC parent_label PCI0 remove_entry;
into device label PCI0 insert begin
Device (MCHC)\n
{\n
	Name (_ADR, Zero)\n
}
end;



#system_WAK2.txt

#
# In 10.8.5 and perhaps later versions of OS X, DSDT method _WAK
# called after resuming from S3 suspend (Sleep, or suspend to RAM),
# is called with garbage in Arg0, where it should be a value
# representing the sleep state being left (1-5).
#
# This causes problems for code in DSDT _WAK method which expects
# and checks against Arg0==3 for wake from sleep to turn on various
# devices or restore internal state to a working state.
#
# This patch adds code at the very beginning of the method to
# force an an out-of-range Arg0 to 3.
#
# See system_WAK1.txt for an alternate patch
#
# Note regarding Yosemite:
#  At least in Yosemite 10.10.2, this bug appears to be fixed.
#  I didn't notice/verify on other versions of Yosemite
#

into method label _WAK code_regex ([\s\S]*) replace_matched
begin
If (LOr(LLess(Arg0,1),LGreater(Arg0,5))) { Store(3,Arg0) }\n
%1
end;

into method label \_WAK code_regex ([\s\S]*) replace_matched
begin
If (LOr(LLess(Arg0,1),LGreater(Arg0,5))) { Store(3,Arg0) }\n
%1
end;



#system_IAOE.txt

# _PTS and _WAK in this DSDT tend to manipulate externals
# in the IAOE device.  Some manipulates are protected with
# CondRefOf, and some not.  Because of the unprotected
# references, the IAOE SSDT must be included for sleep to
# work.

# This patch is an attempt to fix _PTS/_WAK such that IAOE is
# not required.

# _PTS fixes
into method label _PTS code_regex If\s+\(And\s+\(ICNF,\s+One\)\) replace_matched
begin
If (LAnd(CondRefOf(\\_SB.IAOE), And(ICNF,One)))
end;

# _WAK fixes
into method label _WAK code_regex If\s+\(And\s+\(\\_SB\.PCI0\.GFX0\.TCHE,\s+0x0100\)\) replace_matched
begin
If (LAnd(CondRefOf(\\_SB.IAOE), And(\\_SB.PCI0.GFX0.TCHE, 0x0100)))
end;
ze
into method label _WAK code_regex (If\s+\(LEqual\s+\(\\_SB\.IAOE\.ITMR,\s+Zero\)\)(\n.*){9}) replace_matched
begin
If (CondRefOf(\\_SB.IAOE)) {\n
%1\n
}
end;

into method label _WAK code_regex If\s+\(LEqual\s+\(\\_SB\.IAOE\.ITMR,\s+(Zero|0x00)\)\)\s+\{\} remove_matched;



#system_Mutex.txt

#
# Some DSDTs use Mutex objects with non-zero a SyncLevel.  Evidently,
# OS X has some difficulty with this part of the ACPI spec, either that
# or the DSDTs are, in fact, codec incorrectly and Windows is ignoring
# it.

# The common result of a non-zero SyncLevel is failure of methods at the
# point of Acquire on the mutext in question.  This can result in strange
# behavior, failed battery status, or other issues.
#
# This patch corrects all Mutex objects declared with a non-zero
# SyncLevel to use zero.
#

# 10x as workaround for MaciASL bug...
into_all all code_regex Mutex\s+\(([^,]*),\s+[^)]*\) replaceall_matched begin Mutex(%1, 0) end;
into_all all code_regex Mutex\s+\(([^,]*),\s+[^)]*\) replaceall_matched begin Mutex(%1, 0) end;
into_all all code_regex Mutex\s+\(([^,]*),\s+[^)]*\) replaceall_matched begin Mutex(%1, 0) end;
into_all all code_regex Mutex\s+\(([^,]*),\s+[^)]*\) replaceall_matched begin Mutex(%1, 0) end;
into_all all code_regex Mutex\s+\(([^,]*),\s+[^)]*\) replaceall_matched begin Mutex(%1, 0) end;
into_all all code_regex Mutex\s+\(([^,]*),\s+[^)]*\) replaceall_matched begin Mutex(%1, 0) end;
into_all all code_regex Mutex\s+\(([^,]*),\s+[^)]*\) replaceall_matched begin Mutex(%1, 0) end;
into_all all code_regex Mutex\s+\(([^,]*),\s+[^)]*\) replaceall_matched begin Mutex(%1, 0) end;
into_all all code_regex Mutex\s+\(([^,]*),\s+[^)]*\) replaceall_matched begin Mutex(%1, 0) end;
into_all all code_regex Mutex\s+\(([^,]*),\s+[^)]*\) replaceall_matched begin Mutex(%1, 0) end;



#misc_Haswell-LPC.txt

# inject "compatible" with recognized series-8 LPC device-id
into method label _DSM parent_adr 0x001F0000 remove_entry;
into device name_adr 0x001F0000 insert
begin
Method (_DSM, 4, NotSerialized)\n
{\n
    If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
    Return (Package()\n
    {\n
        "compatible", "pci8086,9c43",\n
    })\n
}\n
end;



#system_HPET.txt

# If you have panic "No HPETs available..." or have a abrubt restart
# after waking from sleep, you may need this patch.
# The patch makes sure the HPET device is always available.

# HPET fix to avoid AppleIntelCPUPowerManagement panic
into method label _STA parent_hid PNP0103 remove_entry;
into device name_hid PNP0103 code_regex Name\s\(_STA\,\s+0x0F\) remove_matched;
into device name_hid PNP0103 insert
begin
Name (_STA, 0x0F)\n
end;

into method label _CRS parent_hid PNP0103 remove_entry;
into device name_hid PNP0103 insert
begin
Method (_CRS, 0, NotSerialized)\n
{\n
    Return (BUF0)\n
}\n
end;



#system_IRQ.txt

# This can fix non-working audio and also has an affect on HPET.
#
# Use this if you have issues with patched AppleHDA (required on almost all laptops)
# or if you have issues with HPET (restart after wake).

# IRQ fix
into device name_hid PNP0000 code_regex IRQNoFlags\s\(\)\n\s+\{(\d+)\} remove_matched;
into device name_hid PNP0100 code_regex IRQNoFlags\s\(\)\n\s+\{(\d+)\} remove_matched;
into device name_hid PNP0B00 code_regex IRQNoFlags\s\(\)\n\s+\{(\d+)\} remove_matched;
into device name_hid PNP0103 code_regex IRQNoFlags\s\(\)\n\s+\{.*\} removeall_matched;
into device name_hid PNP0103 code_regex Name\s\(([^,]+),\sResourceTemplate\s\(\).*\n\s+\{((?:.|\n)*)\}\) replace_matched
begin
Name (%1, ResourceTemplate()\n
{\n
    IRQNoFlags() { 0, 8, 11, 15 }\n
%2
})\n
end;



#system_OSYS_win8.txt

# Cause the DSDT to simulate "Windows 2012" when running under "Darwin" (OS X).
#
# This can fix various DSDT related problems for code within the DSDT
# that is conditional on the operating system version.
#
# Sometimes "Windows 2012" is a better choice than "Windows 2006"

into_all method code_regex If\s+\([\\]?_OSI\s+\(\"Windows\s2012\"\)\) replace_matched begin If(LOr(_OSI("Darwin"),_OSI("Windows 2012"))) end;



#system_RTC.txt

#   RTC fix
into device name_hid PNP0B00 code_regex (IO\s\((?:\s*[^,]+,\s*(?:\/\/\s.*)?\s*\n)+\s*)(\dx\d+)(,\s*(?:\/\/\s.*)?\s*\n\s*\)) replace_matched begin %10x02%3 end;



#system_Shutdown2.txt

#  Shutdown fix v2
into method label _PTS code_regex ([\s\S]*) replace_matched
begin
If (LNotEqual(Arg0,5)) {\n
%1\n
}\n
end;



#system_SMBUS.txt

#   SMBUS fix
into device label BUS0 parent_adr 0x001F0003 remove_entry;
into device name_adr 0x001F0003 insert
begin
Device (BUS0)\n
{\n
    Name (_CID, "smbus")\n
    Name (_ADR, Zero)\n
    Device (DVL0)\n
    {\n
        Name (_ADR, 0x57)\n
        Name (_CID, "diagsvault")\n
        Method (_DSM, 4, NotSerialized)\n
        {\n
            If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
            Return (Package() { "address", 0x57 })\n
        }\n
    }\n
}\n
end;



#usb_prw_0x6d_xhc.txt

# remove _PRW methods to prevent instant wake

# delete any existing XHC1 device
into device label XHC1 name_adr 0x00140000 remove_entry;
# delete any existing USB2 device
into device label USB2 name_adr 0x001D0000 remove_entry;

# if _PRW objects are methods
into method label _PRW parent_adr 0x001D0000 remove_entry;
into method label _PRW parent_adr 0x001A0000 remove_entry;
into method label _PRW parent_adr 0x00140000 remove_entry;
into method label _PRW parent_adr 0x001B0000 remove_entry;
# some other LAN cards use 0x00190000
into method label _PRW parent_adr 0x00190000 remove_entry;

# if _PRW methods are stuffed into a separate scope
into method label _PRW parent_label _SB.PCI0.EHC1 remove_entry;
into method label _PRW parent_label _SB.PCI0.EHC2 remove_entry;
into method label _PRW parent_label _SB.PCI0.XHC remove_entry;
into method label _PRW parent_label \_SB.PCI0.EHC1 remove_entry;
into method label _PRW parent_label \_SB.PCI0.EHC2 remove_entry;
into method label _PRW parent_label \_SB.PCI0.XHC remove_entry;

# if _PRW objects are names
into device name_adr 0x001D0000 code_regex Name.*_PRW.*\n.*\n.*\n.*\n.*\}\) remove_matched;
into device name_adr 0x001A0000 code_regex Name.*_PRW.*\n.*\n.*\n.*\n.*\}\) remove_matched;
into device name_adr 0x00140000 code_regex Name.*_PRW.*\n.*\n.*\n.*\n.*\}\) remove_matched;
into device name_adr 0x001B0000 code_regex Name.*_PRW.*\n.*\n.*\n.*\n.*\}\) remove_matched;
into device name_adr 0x00190000 code_regex Name.*_PRW.*\n.*\n.*\n.*\n.*\}\) remove_matched;
# some _PRW have three entries in the Package
into device name_adr 0x001D0000 code_regex Name.*_PRW.*\n.*\n.*\n.*\n.*\n.*\}\) remove_matched;
into device name_adr 0x001A0000 code_regex Name.*_PRW.*\n.*\n.*\n.*\n.*\n.*\}\) remove_matched;
into device name_adr 0x00140000 code_regex Name.*_PRW.*\n.*\n.*\n.*\n.*\n.*\}\) remove_matched;
into device name_adr 0x001B0000 code_regex Name.*_PRW.*\n.*\n.*\n.*\n.*\n.*\}\) remove_matched;
into device name_adr 0x00190000 code_regex Name.*_PRW.*\n.*\n.*\n.*\n.*\n.*\}\) remove_matched;

# seems to work better if _PRW is present, but returns 0 (original was 3) for sleep state
into device name_adr 0x001D0000 insert begin Name(_PRW, Package() { 0x6D, 0 }) end;
into device name_adr 0x001A0000 insert begin Name(_PRW, Package() { 0x6D, 0 }) end;
into device name_adr 0x00140000 insert begin Name(_PRW, Package() { 0x6D, 0 }) end;
into device name_adr 0x001B0000 insert begin Name(_PRW, Package() { 0x6D, 0 }) end;
into device name_adr 0x00190000 insert begin Name(_PRW, Package() { 0x6D, 0 }) end;



#usb_USB_7-series.txt

# USB property injection for 7-series boards (originally HM76)

# Insert Apple USB properties into EHC1
into method label _DSM parent_adr 0x001D0000 remove_entry;
into device name_adr 0x001D0000 insert
begin
Method (_DSM, 4, NotSerialized)\n
{\n
    If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
    Return (Package()\n
    {\n
        "AAPL,clock-id", Buffer() { 0x01 },\n
        "built-in", Buffer() { 0x00 },\n
        "subsystem-id", Buffer() { 0x70, 0x72, 0x00, 0x00 },\n
        "subsystem-vendor-id", Buffer() { 0x86, 0x80, 0x00, 0x00 },\n
        "AAPL,current-available", 2100,\n
        "AAPL,current-extra", 2200,\n
        "AAPL,current-extra-in-sleep", 1600,\n
        "AAPL,device-internal", 0x02,\n
        "AAPL,max-port-current-in-sleep", 2100,\n
    })\n
}\n
end;

# Insert Apple USB properties into EHC2
into method label _DSM parent_adr 0x001A0000 remove_entry;
into device name_adr 0x001A0000 insert
begin
Method (_DSM, 4, NotSerialized)\n
{\n
    If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
    Return (Package()\n
    {\n
        "AAPL,clock-id", Buffer() { 0x01 },\n
        "built-in", Buffer() { 0x00 },\n
        "subsystem-id", Buffer() { 0x70, 0x72, 0x00, 0x00 },\n
        "subsystem-vendor-id", Buffer() { 0x86, 0x80, 0x00, 0x00 },\n
        "AAPL,current-available", 2100,\n
        "AAPL,current-extra", 2200,\n
        "AAPL,current-extra-in-sleep", 1600,\n
        "AAPL,device-internal", 0x02,\n
        "AAPL,max-port-current-in-sleep", 2100,\n
    })\n
}\n
end;

# Insert Apple USB properties into USB 3.0 XHC
into method label _DSM parent_adr 0x00140000 remove_entry;
into device name_adr 0x00140000 insert
begin
Method (_DSM, 4, NotSerialized)\n
{\n
    If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
    Return (Package()\n
    {\n
        "AAPL,clock-id", Buffer() { 0x02 },\n
        "built-in", Buffer() { 0x00 },\n
        "subsystem-id", Buffer() { 0x70, 0x72, 0x00, 0x00 },\n
        "subsystem-vendor-id", Buffer() { 0x86, 0x80, 0x00, 0x00 },\n
        "AAPL,current-available", 2100,\n
        "AAPL,current-extra", 2200,\n
        "AAPL,current-extra-in-sleep", 1600,\n
        "AAPL,device-internal", 0x02,\n
        "AAPL,max-port-current-in-sleep", 2100,\n
    })\n
}\n
end;



# disable XWAK
into method label XWAK code_regex ([\s\S]*) replace_matched
begin
Return(0)\n
%1
end;



#audio_HDEF-layout3.txt

# Note: Change your layout ID if you need something different
# Note: "hda-gfx" is not needed with Haswell and should probably be removed

#   Inject Audio info
into method label _DSM parent_label HDEF remove_entry;
into device label HDEF insert
begin
Method (_DSM, 4, NotSerialized)\n
{\n
    If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
    Return (Package()\n
    {\n
        "layout-id", Buffer() { 3, 0x00, 0x00, 0x00 },\n
        "hda-gfx", Buffer() { "onboard-1" },\n
        "PinConfigurations", Buffer() { },\n
        //"MaximumBootBeepVolume", 77,\n
    })\n
}\n
end;



#graphics_Rename-GFX0.txt

# Note: Most DSDT/SSDTs use GFX0 for the integrated graphics device,
#  but there are few renegades that use VID or AGP1.
#  If your DSDT uses VID or AGP1 instead of GFX0, see the
#  alternate patch "Rename VID/AGP1 to IGPU"

# sometimes there is already IGPU used for other things
into_all all code_regex IGPU, replaceall_matched begin IGFX, end;

# rename GFX0 -> IGPU for better power management
into_all all code_regex GFX0\. replaceall_matched begin IGPU. end;
into_all all code_regex \.GFX0 replaceall_matched begin .IGPU end;
into_all all code_regex \sGFX0, replaceall_matched begin IGPU, end;
into_all all code_regex \(GFX0 replaceall_matched begin (IGPU end;
into_all all label GFX0 set_label begin IGPU end;
into_all all label _SB.PCI0.GFX0 set_label begin _SB.PCI0.IGPU end;
into_all all label \_SB.PCI0.GFX0 set_label begin \_SB.PCI0.IGPU end;
into_all all label _SB.PCI0.GFX0.DD02 set_label begin _SB.PCI0.IGPU.DD02 end;
into_all all label \_SB.PCI0.GFX0.DD02 set_label begin \_SB.PCI0.IGPU.DD02 end;
into_all all label ^^^GFX0 set_label begin ^^^IGPU end;
into_all all label ^^GFX0 set_label begin ^^IGPU end;
into_all all label ^GFX0 set_label begin ^IGPU end;



#graphics_Rename-B0D3.txt

# for DSDT

into method label _WAK code_regex B0D3 replaceall_matched begin HDAU end;
into definitionblock code_regex B0D3 replaceall_matched begin HDAU end;

into device label B0D3 set_label begin HDAU end;
into method label SBCB code_regex B0D3 replaceall_matched begin HDAU end;



#graphics_PTS_WAK-disable.txt

into method label _WAK code_regex (Return\s+\(.*) replace_matched
begin
External(\\_SB.PCI0.RP05.PEGP._OFF, MethodObj)\n
If (CondRefOf(\\_SB.PCI0.RP05.PEGP._OFF)) { \\_SB.PCI0.RP05.PEGP._OFF() }\n
%1
end;



# Rename ACST to ACS0
into device label ACST set_label begin ACS0 end;
into_all all code_regex ACST replaceall_matched begin ACS0 end;



# add fan readings only
into device label SMCD remove_entry;
into definitionblock code_regex . insert
begin
Device (SMCD)\n
{\n
    Name (_HID, "FAN00000") // _HID: Hardware ID\n
// ACPISensors.kext configuration\n
    Name (TACH, Package()\n
    {\n
        "System Fan", "FAN0",\n
    })\n
    /*Name (TEMP, Package()\n
    {\n
        "CPU Heatsink", "TCPU",\n
        "Ambient", "TAMB",\n
        //"Mainboard", "TSYS",\n
        //"CPU Proximity", "TCPP",\n
    })*/\n
    // Actual methods to implement fan/temp readings/control\n
    Method (FAN0, 0, Serialized)\n
    {\n
        Store (\_SB.PCI0.LPCB.EC0.FANS, Local0)\n
        If (Local0) { Divide (Add(0x3C000, ShiftRight(Local0,1)), Local0,, Local0) }\n
        If (LEqual (0x03C4, Local0)) { Return (Zero) }\n
        Return (Local0)\n
    }\n
    /*Method (TCPU, 0, Serialized)\n
    {\n
                Store (\_SB.PCI0.LPCB.EC0.THS0, Local0)\n
                Return (Local0)\n
    }\n
    Method (TAMB, 0, Serialized)\n
    {\n
                Store (\_SB.PCI0.LPCB.EC0.THS1, Local0)\n
                Return (Local0)\n
    }*/\n
}\n
end;



# Rename KBD0 to PS2K
into device label KBD0 set_label begin PS2K end;
into_all all code_regex KBD0 replaceall_matched begin PS2K end;

# Make EC-based brightness up/down work with RehabMan VoodooPS2 ACPI keyboard mechanism

# _Q1C (Fn+F11) called on brightness down key
into method label _Q1C replace_content
begin
    // e06c: code for brightness up\n
    Notify (\_SB.PCI0.LPCB.PS2K, 0x046c)\n
end;

# _Q1D (Fn+F12) called on brightness up key
into method label _Q1D replace_content
begin
    // e06b: code for brightness down\n
    Notify (\_SB.PCI0.LPCB.PS2K, 0x046b)\n
end;

# change F7
into method label _Q28 replace_content
begin
    // e067 will be mapped to either F7 (41) or itself\n
    // Notify (\_SB.PCI0.LPCB.PS2K, 0x0467)\n
    Notify (\_SB.PCI0.LPCB.PS2K, 0x0440)\n
end;

# change NovoButton
#into method label _Q29 replace_content
#begin
#    // e067 will be mapped to either F7 (41) or itself\n
#    // Notify (\_SB.PCI0.LPCB.PS2K, 0x0467)\n
#    Notify (\_SB.PCI0.LPCB.PS2K, 0x0440)\n
#end;

into method label _DSM parent_label PS2K remove_entry;
into device label PS2K insert
begin
       Method(_DSM, 4)\n
        {\n
            If (LEqual (Arg2, Zero)) { Return (Buffer() { 0x03 } ) }\n
            Return (Package()\n
            {\n
                "RM,oem-id", "LENOVO",\n
                "RM,oem-table-id", "U430-RMCF",\n
            })\n
        }\n
\n
        // overrides for VoodooPS2 configuration...\n
        Name(RMCF, Package()\n
        {\n
            "Controller", Package()\n
            {\n
                "WakeDelay", 0,\n
            },\n
            "Sentelic FSP", Package()\n
            {\n
                "DisableDevice", ">y",\n
            },\n
            "ALPS GlidePoint", Package()\n
            {\n
                "DisableDevice", ">y",\n
            },\n
            "Mouse", Package()\n
            {\n
                "DisableDevice", ">y",\n
            },\n
            "Synaptics TouchPad", Package()\n
            {\n
                "MultiFingerVerticalDivisor", 9,\n
                "MultiFingerHorizontalDivisor", 9,\n
                "MomentumScrollThreshY", 12,\n
            },\n
            "Keyboard", Package()\n
            {\n
                "Breakless PS2", Package()\n
                {\n
                    Package(){}, // indicates array\n
                    "e064",\n
                    "e065",\n
                    "e068",\n
                    "e06a",\n
                    "e027",\n
                },\n
                "MaximumMacroTime", 25000000,\n
                "Macro Inversion", Package()\n
                {\n
                    Package(){},\n
                    // Fn+F4\n
                    Buffer() { 0xff, 0xff, 0x02, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x38, 0x01, 0x3e },\n
                    Buffer() { 0xff, 0xff, 0x02, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbe, 0x01, 0xb8 },\n
                    // F5 (without Fn)\n
                    Buffer() { 0xff, 0xff, 0x02, 0x65, 0x01, 0x00, 0x00, 0x00, 0x01, 0x3f },\n
                    Buffer() { 0xff, 0xff, 0x02, 0xe5, 0x01, 0x00, 0x00, 0x00, 0x01, 0xbf },\n
                    // Fn+Ctrl+F6\n
                    Buffer() { 0xff, 0xff, 0x02, 0x27, 0x00, 0x03, 0xff, 0xff, 0x02, 0x66 },\n
                    Buffer() { 0xff, 0xff, 0x02, 0xa7, 0x00, 0x03, 0xff, 0xff, 0x02, 0xe6 },\n
                    // Ctrl+F6\n
                    Buffer() { 0xff, 0xff, 0x02, 0x27, 0x00, 0x03, 0xff, 0xff, 0x02, 0x40 },\n
                    Buffer() { 0xff, 0xff, 0x02, 0xa7, 0x00, 0x03, 0xff, 0xff, 0x02, 0xc0 },\n
                    // Fn+F8\n
                    Buffer() { 0xff, 0xff, 0x02, 0x68, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1d, 0x01, 0x38, 0x01, 0x0f },\n
                    Buffer() { 0xff, 0xff, 0x02, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8f, 0x01, 0xb8, 0x02, 0x9d },\n
                    // Fn+F10\n
                    Buffer() { 0xff, 0xff, 0x02, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x02, 0x5b, 0x01, 0x19 },\n
                    Buffer() { 0xff, 0xff, 0x02, 0xea, 0x00, 0x00, 0x00, 0x00, 0x01, 0x99, 0x02, 0xdb },\n
                },\n
                "Custom ADB Map", Package()\n
                {\n
                    Package(){},\n
                    "e063=3f", // Apple Fn\n
                    "e064=a0", // Exposed All\n
                    "e065=83", // Launchpad\n
                    //"e064=50", // F19\n
                    //"e065=5a", // F20\n
                    "e040=40", // F17\n
                    "e068=4f", // F18\n
                    "e0f2=65", // special F9\n
                    "e06a=70", // video mirror\n
                    "e0fb=91", // brightness down\n
                    "e0fc=90", // brightness up\n
                },\n
                "Custom PS2 Map", Package()\n
                {\n
                    Package(){},\n
                    "e037=64", // PrtSc=F13\n
                    "e073=e028", // F6\n
                    "e076=e028", // F6\n
                },\n
                "Function Keys Special", Package()\n
                {\n
                    Package(){},\n
                    // The following 12 items map Fn+fkeys to Fn+fkeys\n
                    "e020=e020",\n
                    "e02e=e02e",\n
                    "e030=e030",\n
                    "e064=e064",\n
                    "e065=e065",\n
                    "e073=e028",\n
                    "e076=e028",\n
                    "e066=e028",\n
                    "e067=e067",\n
                    "e068=e068",\n
                    "e069=e0f0",\n
                    "e06a=e06a",\n
                    "e06b=e0fb",\n
                    "e06c=e0fc",\n
                    // The following 12 items map fkeys to fkeys\n
                    "3b=3b",\n
                    "3c=3c",\n
                    "3d=3d",\n
                    "3e=3e",\n
                    "3f=3f",\n
                    "40=40",\n
                    "41=41",\n
                    "42=42",\n
                    "43=43",\n
                    "44=44",\n
                    "57=57",\n
                    "58=58",\n
                },\n
                "Function Keys Standard", Package()\n
                {\n
                    Package(){},\n
                    // The following 12 items map Fn+fkeys to fkeys\n
                    "e020=3b",\n
                    "e02e=3c",\n
                    "e030=3d",\n
                    "e064=3e",\n
                    "e065=3f",\n
                    "e073=40",\n
                    "e076=40",\n
                    "e028=40",\n
                    "e040=41",\n
                    "e068=42",\n
                    "e069=e0f2",\n
                    "e06a=44",\n
                    "e06b=57",\n
                    "e06c=58",\n
                    // The following 12 items map fkeys to Fn+fkeys\n
                    "3b=e020",\n
                    "3c=e02e",\n
                    "3d=e030",\n
                    "3e=e064",\n
                    "3f=e065",\n
                    "40=e073",\n
                    "40=e076",\n
                    "40=e028",\n
                    "41=e040",\n
                    "42=e068",\n
                    "43=e0f1",\n
                    "44=e06a",\n
                    "57=e0fb",\n
                    "58=e0fc",\n
                },\n
            },\n
        })\n
end;
